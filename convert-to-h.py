import os
import sys

if len(sys.argv) < 3:
    print("not enough args passed. quitting")
    quit()

idx = 1

SHADER_MODE = False

if sys.argv[idx] == "--shader":
    idx = 2
    SHADER_MODE = True
    

source = sys.argv[idx]
idx += 1
dest = sys.argv[idx]

if not os.path.exists(os.path.dirname(dest)):
    print("directory for the destination doesn't exist. check the path")
    quit()
    

if os.path.exists(dest):
    with open(dest) as destFile:
        if next(destFile, -1) != -1 and not destFile.readline().startswith("// autogenerated"):
            print("this file doesn't seem to be a model include file. overwrite?")
            print("line 1: " + destFile.readline())
            r = input("y/n ")
            if r.lower() != "y":
                quit()

with open(source) as file:
    fileText = file.read()
    fn = os.path.basename(source)
    fileName = os.path.splitext(fn)[0]
    
print(f"{os.path.basename(source)} >> {os.path.basename(dest)} | Shader Mode: {SHADER_MODE}")

if SHADER_MODE and fileName.lower().endswith("shader"):
    fileName = fileName[:5]
    
output = "#pragma once\n"
output += "// autogenerated. any changes will be overwritten!\n\n"
output += "inline static const char* " + fileName

if SHADER_MODE:
    output += "ShaderText = "
else:
    output += "ModelText = "

lines = fileText.splitlines()

count = 0

for i, line in enumerate(lines):
    if (not SHADER_MODE) and line.startswith("# "):
        continue
    if line.isspace() or line == '\n' or len(line) == 0:
        continue
    
    line = line.strip()

    count += len(line) + 1
    
    output += '"' + line + '\\n"'
    if i == len(lines) - 1:
        output += ';'
    else:
        output += '\n'

output += "\n\nconst int " + fileName

if SHADER_MODE:
    output += "ShaderTextCount = " + str(count) + ";"
else:
    output += "ModelTextCount = " + str(count) + ";"

with open(dest, "w") as f:
    f.write(output)