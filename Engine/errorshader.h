#pragma once
#include <string>
std::string errorShaderText = "cbuffer constants : register(b0)\n"
"{\n"
"    float4x4 model;\n"
"    float4x4 view;\n"
"    float4x4 projection;\n"
"    float4x4 mvp;\n"
"    float4 col;\n"
"    float3 viewPos;\n"
"    float3 viewDir;\n"
"    float2 pad;\n"
"};\n"
"struct vs_in\n"
"{\n"
"    float3 positionOS : SV_Position;\n"
"    float3 normal : NORMAL;\n"
"    float4 color : COLOR;\n"
"    float2 texcoord : TEXCOORD;\n"
"};\n"
"struct vs_out\n"
"{\n"
"    float4 positionCS : SV_Position;\n"
"    float3 positionWS : POSITION1;\n"
"};\n"
"vs_out vs_main(vs_in input)\n"
"{\n"
"    vs_out output = (vs_out)0;\n"
"    output.positionCS = mul(mvp, float4(input.positionOS, 1.0));\n"
"    output.positionWS = mul(model, float4(input.positionOS, 1.0));\n"
"    return output;\n"
"}\n"
"float4 ps_main(vs_out input) : SV_TARGET\n"
"{\n"
"    float3 magenta = float3(1, 0, 1);\n"
"    float3 black = float3(0, 0, 0);\n"
"    float3 uv = floor(2 * input.positionWS / 2);\n"
"    float a = abs((uv.x + uv.y + uv.z) % 2);\n"
"    return float4(magenta * a, 1);\n"
"    return float4(lerp(magenta, black, distance(input.positionWS, float3(0, 0, 0)) % 2), 1);\n"
"}";